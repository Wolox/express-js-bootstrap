// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .woloxci/Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /usr/src/app

ENV NODE_ENV testing

ENV HOME /usr/src/app

ENV BABEL_DISABLE_CACHE 1

RUN mkdir -p /install

ENV NODE_PATH=/install/node_modules

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json /install/

WORKDIR /install

RUN npm install
RUN npm install -g gulp
# If you are building your code for production
# RUN npm install --only=production

RUN chmod a+r /usr/src/app

WORKDIR /usr/src/app

# Bundle app source
COPY . .
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected .woloxci/config.yml 1`] = `
"config:
  dockerfile: .woloxci/Dockerfile
  project_name: Project

steps:
  copy_node_modules:
    - cp -r $NODE_PATH/ ./
  lint:
    - npm run lint
  test:
    - npm run test

environment:
  GIT_COMMITTER_NAME: a
  GIT_COMMITTER_EMAIL: b
  LANG: C.UTF-8
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected Jenkinsfile 1`] = `
"@Library('wolox-ci') _

node {

  checkout scm

  woloxCi('.woloxci/config.yml');
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const cors = require('cors');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();

app.use(cors());

app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  isDevelopment: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    rollbar: {
      accessToken: process.env.ROLLBAR_ACCESS_TOKEN,
      environment: process.env.ROLLBAR_ENV
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  isProduction: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');

const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected server.js 1`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and all optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');


// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .woloxci/Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /usr/src/app

ENV NODE_ENV testing

ENV HOME /usr/src/app

ENV BABEL_DISABLE_CACHE 1

RUN mkdir -p /install

ENV NODE_PATH=/install/node_modules

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json /install/

WORKDIR /install

RUN npm install
RUN npm install -g gulp
# If you are building your code for production
# RUN npm install --only=production

RUN chmod a+r /usr/src/app

WORKDIR /usr/src/app

# Bundle app source
COPY . .
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected .woloxci/config.yml 1`] = `
"config:
  dockerfile: .woloxci/Dockerfile
  project_name: Project

steps:
  copy_node_modules:
    - cp -r $NODE_PATH/ ./
  lint:
    - npm run lint
  test:
    - npm run test

environment:
  GIT_COMMITTER_NAME: a
  GIT_COMMITTER_EMAIL: b
  LANG: C.UTF-8
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected Jenkinsfile 1`] = `
"@Library('wolox-ci') _

node {

  checkout scm

  woloxCi('.woloxci/config.yml');
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();


app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  isDevelopment: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  isProduction: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');

const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected server.js 1`] = `
"const app = require('./app');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with AWS, Docker, Jest, Jenkins and non optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');


// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected .travis.yml 1`] = `
"language: node_js

node_js:
  - \\"8.9.12\\"

sudo: true

env:
  - CXX=g++-4.8 NODE_ENV=testing
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const cors = require('cors');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();

app.use(cors());

app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  isDevelopment: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    rollbar: {
      accessToken: process.env.ROLLBAR_ACCESS_TOKEN,
      environment: process.env.ROLLBAR_ENV
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  isProduction: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');

const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected server.js 1`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with AWS, Docker, Jest, Travis and all optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');


// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected .travis.yml 1`] = `
"language: node_js

node_js:
  - \\"8.9.12\\"

sudo: true

env:
  - CXX=g++-4.8 NODE_ENV=testing
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();


app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  isDevelopment: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  isProduction: true
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');

const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected server.js 1`] = `
"const app = require('./app');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with AWS, Docker, Jest, Travis and non optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');


// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .woloxci/Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /usr/src/app

ENV NODE_ENV testing

ENV HOME /usr/src/app

ENV BABEL_DISABLE_CACHE 1

RUN mkdir -p /install

ENV NODE_PATH=/install/node_modules

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json /install/

WORKDIR /install

RUN npm install
RUN npm install -g gulp
# If you are building your code for production
# RUN npm install --only=production

RUN chmod a+r /usr/src/app

WORKDIR /usr/src/app

# Bundle app source
COPY . .
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected .woloxci/config.yml 1`] = `
"config:
  dockerfile: .woloxci/Dockerfile
  project_name: Project

services:
  - mysql

steps:
  copy_node_modules:
    - cp -r $NODE_PATH/ ./
  migrate_db:
    - node_modules/.bin/sequelize db:migrate
  lint:
    - npm run lint
  test:
    - npm run test

environment:
  GIT_COMMITTER_NAME: a
  GIT_COMMITTER_EMAIL: b
  LANG: C.UTF-8
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected Jenkinsfile 1`] = `
"@Library('wolox-ci') _

node {

  checkout scm

  woloxCi('.woloxci/config.yml');
}
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected README.md 2`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();


app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected config/db.js 1`] = `
"const config = require('../config').common.database;

module.exports = {
  development: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'mysql',
    logging: true
  },
  testing: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'mysql',
    logging: false
  },
  production: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'mysql',
    logging: false
  }
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  common: {
    database: {
      name: process.env.DB_NAME_DEV
    }
  }, 
  isDevelopment: true
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  common: {
    database: {
      name: process.env.DB_NAME
    }
  }, 
  isProduction: true
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    database: {
      name: process.env.DB_NAME_TEST
    },
    
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected console.js 2`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"mysql2\\": \\"^1.6.4\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected package.json 2`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"mysql2\\": \\"^1.6.4\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected server.js 1`] = `
"const app = require('./app');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected server.js 2`] = `
"const app = require('./app');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const models = require('../app/models');


const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (MySQL), AWS, Docker, Jest, Jenkins and non optionals creates expected test/app.spec.js 2`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const models = require('../app/models');


const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .woloxci/Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /usr/src/app

ENV NODE_ENV testing

ENV HOME /usr/src/app

ENV BABEL_DISABLE_CACHE 1

RUN mkdir -p /install

ENV NODE_PATH=/install/node_modules

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json /install/

WORKDIR /install

RUN npm install
RUN npm install -g gulp
# If you are building your code for production
# RUN npm install --only=production

RUN chmod a+r /usr/src/app

WORKDIR /usr/src/app

# Bundle app source
COPY . .
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected .woloxci/config.yml 1`] = `
"config:
  dockerfile: .woloxci/Dockerfile
  project_name: Project

services:
  - postgres

steps:
  copy_node_modules:
    - cp -r $NODE_PATH/ ./
  migrate_db:
    - node_modules/.bin/sequelize db:migrate
  lint:
    - npm run lint
  test:
    - npm run test

environment:
  GIT_COMMITTER_NAME: a
  GIT_COMMITTER_EMAIL: b
  LANG: C.UTF-8
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected Jenkinsfile 1`] = `
"@Library('wolox-ci') _

node {

  checkout scm

  woloxCi('.woloxci/config.yml');
}
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected README.md 2`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Jest](https://jestjs.io/docs/en/getting-started).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const cors = require('cors');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();

app.use(cors());

app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected config/db.js 1`] = `
"const config = require('../config').common.database;

module.exports = {
  development: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: true
  },
  testing: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: false
  },
  production: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: false
  }
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  common: {
    database: {
      name: process.env.DB_NAME_DEV
    }
  }, 
  isDevelopment: true
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    rollbar: {
      accessToken: process.env.ROLLBAR_ACCESS_TOKEN,
      environment: process.env.ROLLBAR_ENV
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  common: {
    database: {
      name: process.env.DB_NAME
    }
  }, 
  isProduction: true
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    database: {
      name: process.env.DB_NAME_TEST
    },
    
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected console.js 2`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"pg\\": \\"^7.4.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected package.json 2`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing jest --coverage --runInBand --forceExit test/app\\",
    \\"test\\": \\"NODE_ENV=testing jest test/app --runInBand --forceExit\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk jest test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"jest\\": {
    \\"collectCoverageFrom\\": [
      \\"**/*.js\\",
      \\"!**/console.js\\",
      \\"!**/node_modules/**\\",
      \\"!**/build/**\\",
      \\"!**/migrations/**\\",
      \\"!**/config/**\\",
      \\"!**/scripts/**\\",
      \\"!**/docs/**\\"
    ],
    \\"testEnvironment\\": \\"node\\",
    \\"transform\\": {
      \\"^.+\\\\\\\\.js$\\": \\"babel-jest\\"
    }
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"pg\\": \\"^7.4.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-jest\\": \\"^23.6.0\\",
    \\"jest\\": \\"^24.0.0\\",
    \\"supertest\\": \\"^3.4.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected server.js 1`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected server.js 2`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const models = require('../app/models');


const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (Postgres), AWS, Docker, Jest, Jenkins and all optionals creates expected test/app.spec.js 2`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const models = require('../app/models');


const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected .travis.yml 1`] = `
"language: node_js

node_js:
  - \\"8.9.12\\"

sudo: true

env:
  - CXX=g++-4.8 NODE_ENV=testing
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8

services:
  - postgresql

before_script:
  - psql -c \\"CREATE DATABASE bookstest;\\" -U postgres
  - npm run migrations-test
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Mocha](https://mochajs.org/) and [Chai](https://www.chaijs.com/).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected README.md 2`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Mocha](https://mochajs.org/) and [Chai](https://www.chaijs.com/).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const cors = require('cors');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();

app.use(cors());

app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected config/db.js 1`] = `
"const config = require('../config').common.database;

module.exports = {
  development: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: true
  },
  testing: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: false
  },
  production: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'postgres',
    logging: false
  }
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  common: {
    database: {
      name: process.env.DB_NAME_DEV
    }
  }, 
  isDevelopment: true
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    rollbar: {
      accessToken: process.env.ROLLBAR_ACCESS_TOKEN,
      environment: process.env.ROLLBAR_ENV
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  common: {
    database: {
      name: process.env.DB_NAME
    }
  }, 
  isProduction: true
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    database: {
      name: process.env.DB_NAME_TEST
    },
    
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected console.js 2`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing istanbul cover ./node_modules/mocha/bin/_mocha  test/app.spec.js\\",
    \\"test\\": \\"NODE_ENV=testing ./node_modules/mocha/bin/_mocha --timeout 6000 --exit test/app.spec.js\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk ./node_modules/mocha/bin/_mocha test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"pg\\": \\"^7.4.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"chai\\": \\"^4.1.2\\",
    \\"chai-http\\": \\"^4.2.0\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected package.json 2`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing istanbul cover ./node_modules/mocha/bin/_mocha  test/app.spec.js\\",
    \\"test\\": \\"NODE_ENV=testing ./node_modules/mocha/bin/_mocha --timeout 6000 --exit test/app.spec.js\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk ./node_modules/mocha/bin/_mocha test/app.spec.js\\",
    \\"coveralls\\": \\"npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"cors\\": \\"^2.8.4\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"rollbar\\": \\"^2.3.9\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"pg\\": \\"^7.4.1\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"chai\\": \\"^4.1.2\\",
    \\"chai-http\\": \\"^4.2.0\\",
    \\"coveralls\\": \\"^3.0.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected server.js 1`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected server.js 2`] = `
"const app = require('./app');
const Rollbar = require('rollbar');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    
    const rollbar = new Rollbar({
      accessToken: config.common.rollbar.accessToken,
      enabled: !!config.common.rollbar.accessToken,
      environment: config.common.rollbar.environment || config.environment
    });
    app.use(rollbar.errorHandler());

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const chaiHttp = require('chai-http');
const chai = require('chai');
const models = require('../app/models');

chai.use(chaiHttp);

const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (mssql), AWS, Docker, Mocha, Travis and all optionals creates expected test/app.spec.js 2`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const chaiHttp = require('chai-http');
const chai = require('chai');
const models = require('../app/models');

chai.use(chaiHttp);

const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected .eslintignore 1`] = `
"app/dist
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected .eslintrc.js 1`] = `
"module.exports = require('eslint-config-wolox-node');
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected .gitignore 1`] = `
"# Frontend Dist Files
app/dist

# Mac Files
.DS_Store
*/DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Code coverage
./coverage

# dotenv
.env

# VS Code
.vscode/
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected .nvmrc 1`] = `"8.9.12"`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected .travis.yml 1`] = `
"language: node_js

node_js:
  - \\"8.9.12\\"

sudo: true

env:
  - CXX=g++-4.8 NODE_ENV=testing
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8

services:
  - postgresql

before_script:
  - psql -c \\"CREATE DATABASE bookstest;\\" -U postgres
  - npm run migrations-test
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected Dockerfile 1`] = `
"FROM node:8.9.12

WORKDIR /home/node/app

COPY package.json .
COPY package-lock.json .
COPY .nvmrc .

RUN npm install

COPY . .

EXPOSE 8080
ENV NODE_ENV production
CMD [\\"node\\", \\"server.js\\"]
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected Dockerrun.aws.json 1`] = `
"{
  \\"AWSEBDockerrunVersion\\": \\"1\\",
  \\"Ports\\": [
      {
          \\"ContainerPort\\": \\"8080\\"
      }
  ],
  \\"Volumes\\": [],
  \\"Logging\\": \\"/home/node/app/app/logger/logs\\"
}
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected LICENSE.md 1`] = `
"The MIT License (MIT)

Copyright (c) 2019 Wolox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \\"Software\\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected README.md 1`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Mocha](https://mochajs.org/) and [Chai](https://www.chaijs.com/).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected README.md 2`] = `
"# Project

Project

## First steps

#### Installing node
Get the latest version of node from the [official website](https://nodejs.org/) or using [nvm](https://github.com/creationix/nvm)
Nvm approach is preferred.

#### Getting dependencies
Run \`\`\`npm install\`\`\` or \`\`\`yarn\`\`\` from rootpath of the project.


#### Database configuration
Before running the app, make sure you have [postgresql installed](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) and a db created, to create it run the following steps inside a psql terminal:
1. CREATE DATABASE db_project_name;
2. \\\\c db_project_name
3. CREATE ROLE \\"project_name\\" LOGIN CREATEDB PASSWORD 'project_name';

Then, set in \`.env\` some variables:
- DB_HOST=localhost
- DB_PORT=5432
- DB_USERNAME=project_name
- DB_PASSWORD=project_name
- DB_NAME=db_project_name
- DB_NAME_DEV=db_project_name_dev
- DB_NAME_TEST=db_project_name_test

### Migrations

To create a migration, run \`./node_modules/.bin/sequelize migration:create --name=\\"my-migration-name\\" --config ./migrations/config.js --migrations-path ./migrations/migrations\`.

To run them, execute \`npm run migrations\`.

#### Starting your app
Now, to start your app run \`\`\`npm start\`\`\` in the rootpath of the project. Then access your app at **localhost:port**. The port is logged in the console where you ran the start script.

## Development

#### Environments
By default, the environment will be **development**, but you can easily change it using the **NODE_ENV** environmental variable.

#### Environment variables
\`Dotenv\` is used for managing environment variables. They are stored in the \`/.env\` file. Take into account that the variables defined in the \`bashrc\` are not overrided.

The environment variables should be added to the \`.env\` file in the form of \`NAME=VALUE\`, as the following example:
\`\`\`
DB_USERNAME=root
DB_PASS=superpass
DB_PASSWORD=superpass
PORT=8081
CLIENTS_API=http://api.clients.example.org/
\`\`\`

**Remember not to push nor commit the \`.env\` file.**

#### Logging
To log useful information of your program to the console you just need to import the logger located at \`app/logger\`. There are two possible types of logging: \`info\` and \`error\`. You should use them depending on the type of message you want to show.

Here is an example snippet:
\`\`\`
const logger = require('/app/logger');
...
if (error) { 
    logger.error('There is an error);
} else {
    logger.info('There is no error);
}
\`\`\`

#### Testing

To run your tests you first need to config your testing database by setting the env var \`DB_NAME_TEST\`. as explained
before in [Database configuration](#database-configuration). Also you need to run the migrations in this exclusive
testing database each time you have new ones, you can do this by running the command \`npm run migrations-test\`.
Once you have all the above done you can run your tests with the following command: \`npm test\`. For more information refeer to the documentation of [Mocha](https://mochajs.org/) and [Chai](https://www.chaijs.com/).

#### Debugging
As we know, a NodeJS application is not something easy to debug and because of that we've added the \`--inspect\` flag to make it simpler. Chrome DevTools will get started when running your app using the start script (\`npm start\`), making your debugging easier.

#### REPL console
We can use a node console with \`npm run console\`. There your service objects are exposed as _servicename_ + \\"Service\\". Let's suppose that we have a service \`users\` which has a function \`getAll\`. In your console you can call \`usersService.getAll()\` and see the result. Note that this works also with functions that return promises! To exit the console use \`.exit\`.

#### Documentation
Documentation will be served at \`/docs\`. Remember using [dictum.js](http://www.github.com/Wolox/dictum.js) package to automatically generate documentation for your endpoints. Check [this link](https://github.com/Wolox/dictum.js#chai) for further details.

## Deploy

#### Heroku
Pushing the desired branch to heroku should be enough.
For more information check: https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile.

## Contributing

1. Fork it
2. Create your feature branch (\`git checkout -b my-new-feature\`)
3. Run the tests (\`npm test\`)
4. Commit your changes (\`git commit -am 'Add some feature'\`)
5. Push to the branch (\`git push origin my-new-feature\`)
6. Create new Pull Request

## About

This project is maintained by [Wolox](https://github.com/wolox) and it was written by [Wolox](http://www.wolox.com.ar).

![Wolox](https://raw.githubusercontent.com/Wolox/press-kit/master/logos/logo_banner.png)

## License

**Project** is available under the MIT [license](LICENSE.md).

    Copyright (c) 2019 Wolox

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \\"Software\\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app.js 1`] = `
"const { expressMiddleware, expressRequestIdMiddleware } = require('express-wolox-logger');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const config = require('./config');
const routes = require('./app/routes');
const errors = require('./app/middlewares/errors');

const DEFAULT_BODY_SIZE_LIMIT = 1024 * 1024 * 10;
const DEFAULT_PARAMETER_LIMIT = 10000;

const bodyParserJsonConfig = () => ({
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const bodyParserUrlencodedConfig = () => ({
extended: true,
parameterLimit: config.common.api.parameterLimit || DEFAULT_PARAMETER_LIMIT,
limit: config.common.api.bodySizeLimit || DEFAULT_BODY_SIZE_LIMIT
});

const app = express();


app.use('/docs', express.static(path.join(__dirname, 'docs')));

// Client must send \\"Content-Type: application/json\\" header
app.use(bodyParser.json(bodyParserJsonConfig()));
app.use(bodyParser.urlencoded(bodyParserUrlencodedConfig()));
app.use(expressRequestIdMiddleware);

if (!config.isTesting) app.use(expressMiddleware);

routes.init(app);

app.use(errors.handle);

module.exports = app;
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/controllers/healthCheck.js 1`] = `
"exports.healthCheck = (_, res) => res.status(200).send({ uptime: process.uptime() });
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/errors.js 1`] = `
"const internalError = (message, internalCode) => ({
  message,
  internalCode
});

exports.DATABASE_ERROR = 'database_error';
exports.databaseError = message => internalError(message, exports.DATABASE_ERROR);

exports.DEFAULT_ERROR = 'default_error';
exports.defaultError = message => internalError(message, exports.DEFAULT_ERROR);
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/logger/index.js 1`] = `
"const { logger } = require('express-wolox-logger');

module.exports = logger;
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/middlewares/errors.js 1`] = `
"const errors = require('../errors');
const logger = require('../logger');

const DEFAULT_STATUS_CODE = 500;

const statusCodes = {
  [errors.DATABASE_ERROR]: 503,
  [errors.DEFAULT_ERROR]: 500
};

exports.handle = (error, req, res, next) => {
  if (error.internalCode) res.status(statusCodes[error.internalCode] || DEFAULT_STATUS_CODE);
  else {
    // Unrecognized error, notifying it to rollbar.
    next(error);
    res.status(DEFAULT_STATUS_CODE);
  }
  logger.error(error);
  return res.send({ message: error.message, internal_code: error.internalCode });
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/routes.js 1`] = `
"// const controller = require('./controllers/controller');
const { healthCheck } = require('./controllers/healthCheck');

exports.init = app => {
  app.get('/health', healthCheck);
  // app.get('/endpoint/get/path', [], controller.methodGET);
  // app.put('/endpoint/put/path', [], controller.methodPUT);
  // app.post('/endpoint/post/path', [], controller.methodPOST);
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected app/services/.keep 1`] = `""`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected config/db.js 1`] = `
"const config = require('../config').common.database;

module.exports = {
  development: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'sqlite',
    logging: true
  },
  testing: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'sqlite',
    logging: false
  },
  production: {
    username: config.username,
    password: config.password,
    database: config.name,
    host: config.host,
    dialect: 'sqlite',
    logging: false
  }
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected config/development.js 1`] = `
"exports.config = {
  environment: 'development',
  common: {
    database: {
      name: process.env.DB_NAME_DEV
    }
  }, 
  isDevelopment: true
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected config/index.js 1`] = `
"const ENVIRONMENT = process.env.NODE_ENV || 'development';
const dotenv = require('dotenv');

if (ENVIRONMENT !== 'production') dotenv.config();

const configFile = \`./\${ENVIRONMENT}\`;

const isObject = variable => variable instanceof Object;

/*
 * Deep copy of source object into tarjet object.
 * It does not overwrite properties.
*/
const assignObject = (target, source) => {
  if (target && isObject(target) && source && isObject(source))
    Object.keys(source).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(target, key) || target[key] === undefined)
        target[key] = source[key];
      else assignObject(target[key], source[key]);
    });
  return target;
};

const config = {
  common: {
    database: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD
    },
    api: {
      bodySizeLimit: process.env.API_BODY_SIZE_LIMIT,
      parameterLimit: process.env.API_PARAMETER_LIMIT,
      port: process.env.PORT
    },
    session: {
      header_name: 'authorization',
      secret: process.env.NODE_API_SESSION_SECRET
    }
  }
};

const customConfig = require(configFile).config;
module.exports = assignObject(customConfig, config);
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected config/production.js 1`] = `
"exports.config = {
  environment: 'production',
  common: {
    database: {
      name: process.env.DB_NAME
    }
  }, 
  isProduction: true
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected config/testing.js 1`] = `
"exports.config = {
  environment: 'testing',
  isTesting: true,
  common: {
    database: {
      name: process.env.DB_NAME_TEST
    },
    
    session: {
      secret: 'some-super-secret'
    }
  }
};
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected console.js 1`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected console.js 2`] = `
"/* eslint-disable global-require */
const repl = require('repl');
const fs = require('fs');
const models = require('./app/models');
const pjson = require('./package.json');

const convertFunctionToAsync = f => async (...args) => {
  const result = await f(...args);
  console.log(JSON.stringify(result, null, 2)); // eslint-disable-line no-console
  return result;
};

const convertObjectFunctionsToAsync = serviceMethods => {
  const asyncServiceMethods = {};
  Object.keys(serviceMethods).forEach(key => {
    if (typeof serviceMethods[key] === 'function')
      asyncServiceMethods[key] = convertFunctionToAsync(serviceMethods[key]);
    else asyncServiceMethods[key] = serviceMethods[key];
  });
  return asyncServiceMethods;
};

Promise.resolve().then(() => {
  const replServer = repl.start({
    prompt: \`\${pjson.name}> \`
  });
  replServer.context.models = models;
  const servicesPath = './app/services/';
  fs.readdir(servicesPath, (err, files) => {
    files.forEach(file => {
      const serviceMethods = require(\`\${servicesPath}\${file}\`);
      const asyncServiceMethods = convertObjectFunctionsToAsync(serviceMethods);
      replServer.context[\`\${file.split('.')[0]}Service\`] = asyncServiceMethods;
    });
  });
});
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected docs/.keep 1`] = `""`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected package.json 1`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing istanbul cover ./node_modules/mocha/bin/_mocha  test/app.spec.js\\",
    \\"test\\": \\"NODE_ENV=testing ./node_modules/mocha/bin/_mocha --timeout 6000 --exit test/app.spec.js\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk ./node_modules/mocha/bin/_mocha test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"sqlite3\\": \\"^4.0.4\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"chai\\": \\"^4.1.2\\",
    \\"chai-http\\": \\"^4.2.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected package.json 2`] = `
"{
  \\"name\\": \\"Project\\",
  \\"version\\": \\"0.1.0\\",
  \\"description\\": \\"Project\\",
  \\"engines\\": {
    \\"node\\": \\"8.9.12\\",
    \\"npm\\": \\"6.4.1\\"
  },
  \\"scripts\\": {
    \\"console\\": \\"node console.js\\",
    \\"cover\\": \\"NODE_ENV=testing istanbul cover ./node_modules/mocha/bin/_mocha  test/app.spec.js\\",
    \\"test\\": \\"NODE_ENV=testing ./node_modules/mocha/bin/_mocha --timeout 6000 --exit test/app.spec.js\\",
    \\"test-inspect\\": \\"NODE_ENV=testing node --inspect --debug-brk ./node_modules/mocha/bin/_mocha test/app.spec.js\\",
    \\"eslint-check\\": \\"eslint --print-config .eslintrc.js --ignore-pattern ./.eslintrc.js | eslint-config-prettier-check\\",
    \\"lint\\": \\"eslint \\\\\\"**/*.js\\\\\\" --ignore-pattern ./.eslintrc.js\\",
    \\"lint-diff\\": \\"git diff --name-only --cached --relative | grep \\\\\\\\\\\\\\\\.js$ | xargs eslint\\",
    \\"lint-fix\\": \\"eslint \\\\\\"**/*.js\\\\\\" --fix --ignore-pattern ./.eslintrc.js\\",
    \\"precommit\\": \\"npm run lint-diff\\",
    \\"outdated\\": \\"npm outdated --depth 0\\",
    \\"pretest\\": \\"npm run lint\\",
    \\"prestart\\": \\"npm run lint\\",
    \\"migrations\\": \\"sequelize db:migrate\\",
    \\"migrations-test\\": \\"NODE_ENV=testing sequelize db:migrate\\",
    \\"start\\": \\"nodemon --inspect server.js\\"
  },
  \\"cacheDirectories\\": [
    \\"node_modules\\"
  ],
  \\"main\\": \\"app.js\\",
  \\"author\\": \\"Wolox\\",
  \\"homepage\\": \\"https://test.com.ar\\",
  \\"license\\": \\"MIT\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://test.com.ar.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://test.com.ar/issues\\",
    \\"email\\": \\"tls@wolox.com.ar\\"
  },
  \\"dependencies\\": {
    \\"bcryptjs\\": \\"^2.4.3\\",
    \\"body-parser\\": \\"^1.18.2\\",
    \\"express\\": \\"^4.16.2\\",
    \\"jwt-simple\\": \\"^0.5.1\\",
    \\"sequelize\\": \\"^1.1.2\\",
    \\"sqlite3\\": \\"^4.0.4\\",
    \\"umzug\\": \\"^2.1.0\\",
    \\"express-wolox-logger\\": \\"0.0.2\\"
  },
  \\"devDependencies\\": {
    \\"babel\\": \\"6.23.0\\",
    \\"babel-core\\": \\"6.26.0\\",
    \\"babel-eslint\\": \\"^8.2.2\\",
    \\"babel-preset-es2015\\": \\"6.24.1\\",
    \\"chai\\": \\"^4.1.2\\",
    \\"chai-http\\": \\"^4.2.0\\",
    \\"dictum.js\\": \\"^1.0.0\\",
    \\"dotenv\\": \\"^5.0.0\\",
    \\"eslint\\": \\"^5.9.0\\",
    \\"eslint-plugin-import\\": \\"^2.17.3\\",
    \\"eslint-plugin-prettier\\": \\"^3.0.1\\",
    \\"husky\\": \\"^0.14.3\\",
    \\"istanbul\\": \\"^0.4.3\\",
    \\"mocha\\": \\"^5.0.1\\",
    \\"mocha-lcov-reporter\\": \\"^1.2.0\\",
    \\"nodemon\\": \\"^1.18.7\\",
    \\"prettier\\": \\"^1.15.3\\",
    \\"prettier-eslint\\": \\"^8.8.2\\",
    \\"sequelize-cli\\": \\"^4.0.0\\",
    \\"prompt\\": \\"^1.0.0\\",
    \\"eslint-config-wolox\\": \\"^3.0.0\\",
    \\"eslint-config-wolox-node\\": \\"^2.0.0\\"
  }
}
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected pull_request_template.md 1`] = `
"## Summary

[Change!] Describe your feature, problems you had, notes, improvements and others.

## Known Issues

[Change!] List any known issue of the feature you are implementing.

## Trello Card

[Change!] Link to the associated Trello card.
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected server.js 1`] = `
"const app = require('./app');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected server.js 2`] = `
"const app = require('./app');
const migrationsManager = require('./migrations');
const config = require('./config');
const logger = require('./app/logger');

const port = config.common.api.port || 8080;

Promise.resolve()
  .then(() => migrationsManager.check()) 
  .then(() => {
    

    app.listen(port);

    logger.info(\`Listening on port: \${port}\`);
  })
  .catch(logger.error);"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected test/app.spec.js 1`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const chaiHttp = require('chai-http');
const chai = require('chai');
const models = require('../app/models');

chai.use(chaiHttp);

const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;

exports[`Example project with Sequelize (sqlite), AWS, Docker, Mocha, Travis and non optionals creates expected test/app.spec.js 2`] = `
"/* eslint-disable global-require */
'use strict';

const fs = require('fs');
const path = require('path');
const chaiHttp = require('chai-http');
const chai = require('chai');
const models = require('../app/models');

chai.use(chaiHttp);

const tables = Object.values(models.sequelize.models);

const truncateTable = model =>
  model.destroy({ truncate: true, cascade: true, force: true, restartIdentity: true });

const truncateDatabase = () => Promise.all(tables.map(truncateTable));

beforeEach(done => {
  truncateDatabase()
    .then(() => done());
});

// including all test files
const normalizedPath = path.join(__dirname, '.');

const requireAllTestFiles = pathToSearch => {
  fs.readdirSync(pathToSearch).forEach(file => {
    if (fs.lstatSync(\`\${pathToSearch}/\${file}\`).isDirectory()) requireAllTestFiles(\`\${pathToSearch}/\${file}\`);
    else require(\`\${pathToSearch}/\${file}\`);
  });
};

requireAllTestFiles(normalizedPath);
"
`;
